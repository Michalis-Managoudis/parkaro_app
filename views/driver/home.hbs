{{!-- <iframe width="600" height="450" style="border:0" loading="lazy" allowfullscreen
    referrerpolicy="no-referrer-when-downgrade" src="https://www.google.com/maps/embed/v1/place?key=AIzaSyD6hcoZpFvgpckLmM-17cOqC19DYbeh3vY
    &q=Space+Needle,Seattle+WA">
</iframe>
<p>direct embed google map</p> --}}
<h1 id="h_text"></h1>
<div class="d-md-flex flex-row-reverse">
    <div class="col-md-4 mb-2">
        <form action="" method="post" id="_form2" class="ms-3">
            {{!-- <div class="input-group">
                <div class="form-outline">
                    <input type="search" id="form1" class="form-control" placeholder="Search" />
                </div>
                <button type="button" class="btn btn-primary">
                    <i class="fa fa-search"></i>
                </button>
            </div> --}}
            {{!-- <br> --}}
            <div id="_search">
                <div class="mb-3">
                    <label for="search_date1">{{#if lang}}Άφιξη:{{else}}Arrival:{{/if}}</label> {{#if lang}}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{{else}}&nbsp; &nbsp; &nbsp;{{/if}}
                    <input type="datetime-local" class="dates_2" id="search_date1" name="s_dttm" value="{{dates.start}}" required autofocus />
                </div>
                <div>
                    <label for="search_date2">{{#if lang}}Αναχώρηση:{{else}}Departure:{{/if}}</label>
                    <input type="datetime-local" class="dates_2" id="search_date2" name="e_dttm" value="{{dates.end}}" required />
                </div>
            </div>
            {{!-- <button hidden type="submit" class="btn btn-outline-primary">search</button> --}}
        </form>
    </div>
    <div id="map" class="col-md-8 w-md-100 h-md-25"></div>
</div>

{{!-- <div id="menu">
    <input id="satellite-v9" type="radio" name="rtoggle" value="satellite">
    <label for="satellite-v9">satellite</label>
    <input id="light-v10" type="radio" name="rtoggle" value="light">
    <label for="light-v10">light</label>
    <input id="dark-v10" type="radio" name="rtoggle" value="dark">
    <label for="dark-v10">dark</label>
    <input id="streets-v11" type="radio" name="rtoggle" value="streets" checked="checked">
    <label for="streets-v11">streets</label>
    <input id="outdoors-v11" type="radio" name="rtoggle" value="outdoors">
    <label for="outdoors-v11">outdoors</label>
</div> --}}

<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" type="text/css">

<script>
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            //const axios = require('axios');
            mapboxgl.accessToken = 'pk.eyJ1IjoibWlob3NtaWtlIiwiYSI6ImNsNG8xcTJndjAwdDEza2xoMjRjZnhlcnoifQ.14_-vR9YsWexqJngngO1HA';
            const map = new mapboxgl.Map({
                //accessToken: 'pk.eyJ1IjoibWlob3NtaWtlIiwiYSI6ImNsNG8xcTJndjAwdDEza2xoMjRjZnhlcnoifQ.14_-vR9YsWexqJngngO1HA',
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [position.coords.longitude, position.coords.latitude],
                //center: [23.727539, 37.983810],
                zoom: 14.00
            });
            // Add the control to the map.
            map.addControl(
                new MapboxGeocoder({
                    accessToken: mapboxgl.accessToken,
                    mapboxgl: mapboxgl
                })
            );
            const data = {{{ parking_station_locations }}};
            //console.log(data);
            const marker_data = {
                'type': 'geojson',
                'data': {
                    'type': 'FeatureCollection',
                    'features': []
                }
            };
            map.on('load', () => {
                let stars = "";
                let prc = "";
                let disc = "";
                for (let i = 0; i < Object.keys(data).length; i++) {
                    stars = "";
                    if (data[i].rating === "NaN") {
                        stars = '<i class="fa fa-star-o"></i>';
                        data[i].rating = 0;
                    }
                    for (let j = 1; j <= data[i].rating; j++) stars = stars + '<i class="fa fa-star"></i>';
                    if (!Number.isInteger(data[i].rating)) stars = stars + '<i class="fa fa-star-half-empty"></i>';
                    if (data[i].price) prc = {{#if lang}}'<p class="m-0"> Τιμή: '{{else}}'<p class="m-0"> Price: '{{/if}} + data[i].price + ' €</p>';
                    if (data[i].discount) disc = '<p class="m-0 bg-warning">' + data[i].discount + '%</p>';
                    marker_data.data.features[i] = {
                        'type': 'Feature',
                        'properties': {
                            'id': data[i].id,
                            'description':
                                '<strong>' + data[i].name + '</strong> <span>' + stars + '(' + data[i].rating + '/5)' + '</span> <br> <div class="d-flex justify-content-between">' + disc + prc + ' <a href="/book/' + data[i].id + '" id="' + data[i].id + {{#if lang}}'" class="m-h-ps_marker bg-info">Κράτηση</a></div>'{{else}}'" class="m-h-ps_marker bg-info">BOOK NOW</a></div>'{{/if}},
                            'icon': 'car-15'
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': data[i].location
                        }
                    };
                }
                map.addSource('places', marker_data);
                // Add a layer showing the places.
                map.addLayer({
                    'id': 'places',
                    'type': 'symbol',
                    'source': 'places',
                    'layout': {
                        'icon-image': '{icon}',
                        'icon-allow-overlap': true
                    }
                });
            });

            //const popup = new mapboxgl.Popup();

            // When a click event occurs on a feature in the places layer, open a popup at the
            // location of the feature, with description HTML from its properties.
            map.on('click', 'places', (e) => {
                // Copy coordinates array.
                const coordinates = e.features[0].geometry.coordinates;
                const description = e.features[0].properties.description;
                //window.alert(e.features[0].properties.id);

                new mapboxgl.Popup()
                    .setLngLat(coordinates)
                    .setHTML(description)
                    .addTo(map);
            });

            // Change the cursor to a pointer when the mouse is over the places layer.
            map.on('mouseenter', 'places', () => {
                map.getCanvas().style.cursor = 'pointer';
            });

            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'places', () => {
                map.getCanvas().style.cursor = '';
                //popup.remove();
            });

            //document.getElementsByClassName("m-h-ps_marker").addEventListener("click", function(e) {
            //    console.log(e);
            //sessionStorage.setItem("parking_station_target",e.properties.id);
            //});

            //function pass_id(el_id) {
            //sessionStorage.setItem("parking_station_target", el_id);
            //console.log(el_id);
            //alert(el_id);
            //}

            //// map style
            //const layerList = document.getElementById('menu');
            //const inputs = layerList.getElementsByTagName('input');
            //for (const input of inputs) {
            //    input.onclick = (layer) => {
            //        const layerId = layer.target.id;
            //        map.setStyle('mapbox://styles/mapbox/' + layerId);
            //    };
            //}
        },
        function (position) {
            //const axios = require('axios');
            mapboxgl.accessToken = 'pk.eyJ1IjoibWlob3NtaWtlIiwiYSI6ImNsNG8xcTJndjAwdDEza2xoMjRjZnhlcnoifQ.14_-vR9YsWexqJngngO1HA';
            const map = new mapboxgl.Map({
                //accessToken: 'pk.eyJ1IjoibWlob3NtaWtlIiwiYSI6ImNsNG8xcTJndjAwdDEza2xoMjRjZnhlcnoifQ.14_-vR9YsWexqJngngO1HA',
                container: 'map',
                // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
                style: 'mapbox://styles/mapbox/streets-v11',
                //center: [position.coords.longitude, position.coords.latitude],
                center: [23.727539, 37.983810],
                zoom: 14.00
            });

            // add a zoom event listener
            //map.on('zoom', function() {
            //    var zoomLevel = map.getZoom();
            //    console.log('Current zoom level:', zoomLevel);
            //});

            // Add the control to the map. (searchbox on map)
            map.addControl(
                new MapboxGeocoder({
                    accessToken: mapboxgl.accessToken,
                    mapboxgl: mapboxgl
                })
            );

            const data = {{{ parking_station_locations }}};
            //console.log(data);
            const marker_data = {
                'type': 'geojson',
                'data': {
                    'type': 'FeatureCollection',
                    'features': []
                }
            };
            map.on('load', () => {
                map.loadImage('/images/parking_marker2.png', (error, image) => {    
                    if (error) throw error;
                    // Add the image to the map style.
                    map.addImage('parking__marker', image);

                    let stars = "";
                    let prc = "";
                    let disc = '<div class="d-flex justify-content-between">';
                    for (let i = 0; i < Object.keys(data).length; i++) {
                        stars = "";
                        if (data[i].rating === "NaN") {
                            stars = '<i class="fa fa-star-o"></i>';
                            data[i].rating = 0;
                        }
                        for (let j = 1; j <= data[i].rating; j++) stars = stars + '<i class="fa fa-star"></i>';
                        if (!(parseInt(data[i].rating) == data[i].rating)) stars = stars + '<i class="fa fa-star-half-empty"></i>';
                        else data[i].rating = parseInt(data[i].rating);
                        if (data[i].price) prc = {{#if lang}}'<p class="m-0 bg-warning"> Τιμή: '{{else}}'<p class="m-0 bg-warning"> Price: '{{/if}} + data[i].price + ' €</p>';
                        if (data[i].discount) disc += '<p class="m-0">' + data[i].discount + '% discount</p>';
                        marker_data.data.features[i] = {
                            'type': 'Feature',
                            'properties': {
                                'id': data[i].id,
                                'description':
                                    '<div class="_map_popup"><strong class="_map_popup_el">' + data[i].name + '</strong> <span class="_map_popup_el text-nowrap">' + stars + '(' + data[i].rating + '/5)' + '</span> <br> ' + disc + prc + '</div> <div class="d-flex justify-content-center"><a href="/book/' + data[i].id + '" id="' + data[i].id + {{#if lang}}'" class="m-h-ps_marker bg-info mt-2">Κράτηση</a>'{{else}}'" class="m-h-ps_marker bg-info  mt-2">BOOK NOW</a>'{{/if}}+ '</div></div>',
                                'icon': 'parking__marker'
                            },
                            'geometry': {
                                'type': 'Point',
                                'coordinates': data[i].location
                            }
                        };
                    }
                    map.addSource('places', marker_data);
                    // Add a layer showing the places.
                    map.addLayer({
                        'id': 'places',
                        'type': 'symbol',
                        'source': 'places',
                        'layout': {
                            'icon-image': '{icon}',
                            //'icon-image': 'mapbox://styles/mihosmike/cl7xa1a85001017nq8g0b2qy4/assets/parking__marker.svg',
                            'icon-allow-overlap': true,
                            'icon-size': ['interpolate', ['linear'], ['zoom'], 0, 0.08, 10, 0.1, 14, 0.13, 15, 0.15]
                        }
                    });
                });
            });
            //const popup = new mapboxgl.Popup();

            // When a click event occurs on a feature in the places layer, open a popup at the
            // location of the feature, with description HTML from its properties.
            map.on('click', 'places', (e) => {
                // Copy coordinates array.
                const coordinates = e.features[0].geometry.coordinates;
                const description = e.features[0].properties.description;
                //window.alert(e.features[0].properties.id);

                new mapboxgl.Popup()
                    .setLngLat(coordinates)
                    .setHTML(description)
                    .addTo(map);
            });

            // Change the cursor to a pointer when the mouse is over the places layer.
            map.on('mouseenter', 'places', () => {
                map.getCanvas().style.cursor = 'pointer';
            });

            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'places', () => {
                map.getCanvas().style.cursor = '';
                //popup.remove();
            });

            //document.getElementsByClassName("m-h-ps_marker").addEventListener("click", function(e) {
            //    console.log(e);
            //sessionStorage.setItem("parking_station_target",e.properties.id);
            //});

            //function pass_id(el_id) {
            //sessionStorage.setItem("parking_station_target", el_id);
            //console.log(el_id);
            //alert(el_id);
            //}

            //// map style
            //const layerList = document.getElementById('menu');
            //const inputs = layerList.getElementsByTagName('input');
            //for (const input of inputs) {
            //    input.onclick = (layer) => {
            //        const layerId = layer.target.id;
            //        map.setStyle('mapbox://styles/mapbox/' + layerId);
            //    };
            //}
        });
    }
    else {
        alert("Geolocation is not supported by this browser.");
    }
</script>

<script>
    let parking_type = {{{pr_tp}}};
    let h_txt = "";
    switch(parking_type) {
        case 1:
            h_txt = {{#if lang}}"Αεροδρόμιο"{{else}}"Airport"{{/if}};
            break;
        case 2:
            h_txt = {{#if lang}}"Λιμάνι"{{else}}"Port"{{/if}};
            break;
        default:
            h_txt = {{#if lang}}"Πόλη"{{else}}"City"{{/if}};
    }
    document.getElementById("h_text").textContent = h_txt;

    let _dt1 = document.getElementById("search_date1");
    let _dt2 = document.getElementById("search_date2");
    let _srch = document.getElementById("_search");

    let today = new Date();
    let dd = today.getDate();
    let mm = today.getMonth() + 1; //January is 0!
    let hh = today.getHours();
    let mn = today.getMinutes();
    if (dd < 10) { dd = '0' + dd; }
    if (mm < 10) { mm = '0' + mm; }
    if (hh < 10) { hh = '0' + hh; }
    if (mn < 10) { mn = '0' + mn; }
    today = today.getFullYear() + '-' + mm + '-' + dd + 'T' + hh + ':' + mn;

    _dt1.min = today;
    _dt2.min = today;

    _dt2.addEventListener('change', function () {
        _dt1.max = _dt2.value;
        check_available();
    });
    _dt1.addEventListener('change', function () {
        _dt2.min = _dt1.value;
        check_available();
    });

    function check_available() {
        if (_dt1.value != "" && _dt2.value != "") {
            document.getElementById("_form2").submit();
        }
    }
</script>